import { Injectable } from '@angular/core';

@Injectable()
export class MessageService {
    //
    // private readonly channels: Map<number, Channel> = new Map<number, Channel>();
    // private readonly pagesMap: Map<number, Page> = new Map<number, Page>();
    // public readonly rootPages: Array<Page> = new Array<Page>();
    //
    // public colorBg = '#F4E5D7';
    // public colorText = '#313e41';
    // public colorDigest = '#ADA99A';
    //
    // private headers: HttpHeaders;
    //
    // public get status() {
    //     return this._status;
    // }
    // public set status(status: SessionStatus) {
    //     if (status !== this._status) {
    //         this._status = status;
    //         this.statusSubject.next(status);
    //     }
    // }
    // private _status:SessionStatus = SessionStatus.UNITIALIZED;
    // public statusSubject = new Subject<SessionStatus>();
    // public get isAuthorized():boolean {
    //     return this.status == SessionStatus.AUTHORIZED;
    // }
    //
    // constructor(
    //     private http: HttpClient
    // ) {
    //     this.headers = new HttpHeaders({
    //         'Content-Type': 'application/json; charset=utf-8',
    //     });
    //     console.log('Will be connecting to ' + TopSecret.ApiPath);
    // }
    //
    // public getOrCreateChannel(id: number): Channel {
    //     var channel = this.channels.get(id);
    //     if (!channel) {
    //         channel = new Channel();
    //         this.channels.set(id, channel);
    //     }
    //     return channel;
    // }
    //
    // public getOrCreatePage(id: number): Page {
    //     var page = this.pagesMap.get(id);
    //     if (!page) {
    //         page = new Page();
    //         page.id = id;
    //         this.pagesMap.set(id, page);
    //     }
    //     return page;
    // }
    //
    // /**
    //  * –ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–µ—Ä—É
    //  */
    // public sendCommand(commandName: string, params: object, callback: () => {}) {
    //
    //     let httpParams = (new HttpParams());
    //     httpParams = httpParams.append('cmd',  commandName);
    //
    //     let paramsS = '';
    //     for (let key in params) {
    //         httpParams = httpParams.append(key, params[key]);
    //         paramsS += ' ' + key + '=' + params[key];
    //     }
    //
    //     console.log('‚Æû‚Æû ' + commandName + ':' + paramsS);
    //
    //     this.http.post(
    //         TopSecret.ApiPath,
    //         null,
    //         {
    //             headers: this.headers,
    //             params: httpParams,
    //             responseType: 'text',
    //             withCredentials: true // With Credentials!
    //         }
    //     ).subscribe(
    //         (json) => {
    //             console.groupCollapsed('‚Æú‚Æú ' + commandName);
    //             console.log(json);
    //             console.groupEnd();
    //             let result: any = null;
    //             try {
    //                 result = JSON.parse(json);
    //             }
    //             catch(e) {
    //                 result = {"error": "JSON is not parseable: " + json};
    //             }
    //
    //             // –°–Ω–∞—á–∞–ª–∞ –¥–∞—ë–º –ø–æ–Ω—é—Ö–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ö—É–∫—É
    //             if (result)  {
    //                 this.globalCommandHook(result);
    //             }
    //
    //             // –ü–æ—Ç–æ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞
    //             if (result && callback) {
    //                 callback(result);
    //             }
    //         },
    //         (err: HttpErrorResponse) => {
    //             alert('HTTP Error: ' + err.url + ': ' + err.message);
    //             console.error('HTTP Error: ' + err.url + ': ' + err.message);
    //         }
    //     );
    // }
    //
    // /**
    //  * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    //  * –î—ë—Ä–≥–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–∞–Ω–Ω—ã–µ.
    //  * –¢—É—Ç –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ —Ä–∞–∑–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    //  */
    // private globalCommandHook(input:any) {
    //
    //     // debug log
    //     // –í—ã–≤–µ–¥–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏
    //
    //     if (input.log) {
    //         console.group('Server logs:');
    //         for (var msg of input.log as Array<string>) {
    //             console.log('üå∏ ' + msg);
    //         }
    //         console.groupEnd();
    //     }
    //
    //     // status
    //     // –ü—Ä–æ–≤–µ—Ä–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    //
    //     if (input.status) {
    //         if (input.status.authorized) {
    //             this.status = SessionStatus.AUTHORIZED;
    //         } else {
    //             this.status = SessionStatus.UNAUTHORIZED;
    //         }
    //     }
    //
    //     // channels
    //     // –ü—Ä–∏—à—ë–ª —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    //
    //     if (input.channels) {
    //         this.pagesMap.clear();
    //         this.rootPages.length = 0;
    //         const a = input.channels.channels as Array<any>;
    //         let page: Page;
    //         for (const item of a) {
    //
    //             // –î–æ–±–∞–≤–∏–º —Ç–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –º–µ–Ω—é
    //             page = this.getOrCreatePage(item['id']);
    //             page.type = PageType.Channel;
    //             page.parentId = parseInt(item['pid']);
    //             page.name = item['name'];
    //             page.timeChanged = item['d'];
    //             page.timeViewed = item['v'];
    //
    //             // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è - –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫
    //             if (!page.parentId)
    //                 this.rootPages.push(page);
    //
    //             // –û–±–Ω–æ–≤–∏–º/—Å–æ–∑–¥–∞–¥–∏–º –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞)
    //             if (page.type == PageType.Channel) {
    //                 var channel = this.getOrCreateChannel(page.id);
    //                 channel.timeViewed = page.timeViewed;
    //             }
    //         }
    //     }
    // }
    //
    // /**
    //  * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –õ–µ–∑–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–ª—é—á—É.
    //  */
    // public startSession()
    // {
    //     this.status = SessionStatus.PENDING;
    //     this.sendCommand('start', {});
    // }
    //
    // /**
    //  * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    //  */
    // public login(login:string, password:string, callback: Function = null)
    // {
    //     this.sendCommand('login', {login: login, password:password}, (result) => {
    //         if (result.status && result.status.authorized) {
    //             this.startSession();
    //             if (callback)
    //                 callback();
    //         }
    //     });
    // }
    //
    // /**
    //  * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    //  */
    // public logOut(callback: Function = null)
    // {
    //     this.sendCommand('log_out', {}, callback);
    // }
    //
    // /**
    //  * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    //  */
    // public loadChannel(channelId: number, lastVieved: string, callback: Function) {
    //     this.sendCommand('get_channel', {cid: channelId.toString(), lv: lastVieved}, callback);
    // }
    //
    // /**
    //  * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞
    //  */
    // public loadThread(threadId: number, lastVieved: string, callback: Function) {
    //     this.sendCommand('get_thread', {tid: threadId.toString(), lv: lastVieved}, callback);
    // }
    //
    // /**
    //  * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ª–µ–≤–æ–≥–æ –º–µ–Ω—é
    //  */
    // public loadChannels(lastVieved: string, callback: Function) {
    //     this.sendCommand('get_channels', {lv: lastVieved}, callback);
    // }

}
